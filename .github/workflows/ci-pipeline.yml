name : CI-CD Pipeline
on:
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: zigg_fastapi
  ECS_SERVICE: zigg-fastapi-ecs-dev
  ECS_CLUSTER: zigg-backend-infra-dev
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: zigg-ai

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
          - name: 1. Checkout
            uses: actions/checkout@v4

          - name: 2. Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}

          - name: 3. Download file from S3
            run: |
                aws s3 cp s3://zigg-code-deploy-bucket/fast-api-env/.env ./ 
                aws s3 cp s3://zigg-code-deploy-bucket/fast-api-env/ZIGG.json ./
                ls -al

          - name: 4. Python Download
            uses: actions/setup-python@v5
            with:
                python-version: '3.10.14' 

          - name: Display Python version
            run: python -c "import sys; print(sys.version)"
      
          - name: 5. Install dependencies
            run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

          - name: 6. Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1


          - name: 7. Build, tag, and push image to Amazon ECR
            id: build-image
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              IMAGE_TAG: ${{ github.sha }}
            run: |
              # Build a docker container and 
              # push it to ECR so that it can
              # be deployed to ECS.
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: ${{ env.ECS_TASK_DEFINITION }}
              container-name: ${{ env.CONTAINER_NAME }}
              image: ${{ steps.build-image.outputs.image }}

          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ env.ECS_SERVICE }}
              cluster: ${{ env.ECS_CLUSTER }}
              wait-for-service-stability: true
